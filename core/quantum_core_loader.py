"""
Quantum Core Loader v1.0.0
T√°c gi·∫£: youandme191298
Ch·ª©c nƒÉng: T·ª± ƒë·ªông n·∫°p to√†n b·ªô 40 t·∫ßng nƒÉng l∆∞·ª£ng t·ª´ quantum_layer_map.json
v√† kh·ªüi t·∫°o pipeline l∆∞·ª£ng t·ª≠ theo ƒë√∫ng th·ª© t·ª± ƒë·ªãnh nghƒ©a.
"""

import os
import json
import importlib
import time
import traceback

# ==============================
# C·∫•u h√¨nh c∆° b·∫£n
# ==============================
LAYER_MAP_PATH = os.path.join(os.path.dirname(__file__), "..", "quantum_layer_map.json")
CORE_PATH = os.path.dirname(__file__)
LOG_PATH = os.path.join(CORE_PATH, "logs")
os.makedirs(LOG_PATH, exist_ok=True)
LOG_FILE = os.path.join(LOG_PATH, "quantum_loader.log")


def log(message: str):
    """Ghi log ra console v√† file."""
    ts = time.strftime("[%Y-%m-%d %H:%M:%S]")
    text = f"{ts} {message}"
    print(text)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")


def load_json(file_path):
    """ƒê·ªçc file JSON c·∫•u h√¨nh."""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {file_path}")
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)


def import_layer(module_name, layer_name):
    """Th·ª≠ n·∫°p module v√† kh·ªüi t·∫°o."""
    try:
        mod = importlib.import_module(f"core.{module_name}")
        if hasattr(mod, "init_layer"):
            mod.init_layer()
            log(f"‚úÖ {layer_name} ‚Äì ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng (init_layer).")
        else:
            log(f"‚öôÔ∏è  {layer_name} ‚Äì N·∫°p module th√†nh c√¥ng (kh√¥ng c√≥ init_layer).")
        return True
    except Exception as e:
        log(f"‚ùå L·ªói khi n·∫°p {layer_name}: {e}")
        traceback_str = "".join(traceback.format_tb(e.__traceback__))
        log(traceback_str)
        return False


def run_loader():
    """Ch·∫°y qu√° tr√¨nh n·∫°p to√†n b·ªô h·ªá t·∫ßng."""
    start_time = time.time()
    log("=" * 80)
    log("üöÄ B·∫ÆT ƒê·∫¶U KH·ªûI T·∫†O QUANTUM CORE SERVER PIPELINE")
    log("=" * 80)

    data = load_json(LAYER_MAP_PATH)
    domains = data.get("domains", [])
    total_layers = 0
    success = 0
    failed = 0

    for domain in domains:
        log(f"\nüåê [Domain] {domain['name']}: {domain['description']}")
        for layer in domain["layers"]:
            total_layers += 1
            module_name = layer["file"].replace(".py", "")
            layer_name = f"T·∫ßng {layer['id']:02d} ‚Äì {layer['name']}"
            log(f"üîπ ƒêang n·∫°p {layer_name} ...")
            ok = import_layer(module_name, layer_name)
            if ok:
                success += 1
            else:
                failed += 1
            time.sleep(0.1)  # cho c·∫£m gi√°c ‚Äún·∫°p nƒÉng l∆∞·ª£ng‚Äù :D

    elapsed = time.time() - start_time
    log("\n" + "=" * 80)
    log(f"üèÅ HO√ÄN T·∫§T KH·ªûI T·∫†O PIPELINE ‚Äì T·ªïng: {total_layers}, Th√†nh c√¥ng: {success}, L·ªói: {failed}")
    log(f"‚è±Ô∏è Th·ªùi gian: {elapsed:.2f} gi√¢y")
    log("=" * 80)

    return {"total": total_layers, "success": success, "failed": failed, "time": elapsed}


if __name__ == "__main__":
    result = run_loader()
    if result["failed"] == 0:
        log("üåà H·ªÜ TH·ªêNG QUANTUM CORE ƒê√É S·∫¥N S√ÄNG HO·∫†T ƒê·ªòNG.")
    else:
        log("‚ö†Ô∏è M·ªôt s·ªë t·∫ßng ch∆∞a n·∫°p ƒë∆∞·ª£c, ki·ªÉm tra log chi ti·∫øt trong core/logs/quantum_loader.log")
