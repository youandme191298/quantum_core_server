"""
Quantum Core Loader v2.0
-----------------------------------------
T√°c gi·∫£: youandme191298
M·ª•c ƒë√≠ch:
- T·ª± ƒë·ªông n·∫°p to√†n b·ªô 40 t·∫ßng l∆∞·ª£ng t·ª≠ theo pipeline trong quantum_layer_map.json
- Ghi log chi ti·∫øt (console + file)
- Hi·ªÉn th·ªã ti·∫øn tr√¨nh b·∫±ng progress bar
- ƒêo th·ªùi gian t·ª´ng t·∫ßng
- T·ª± ph·ª•c h·ªìi c√°c t·∫ßng b·ªã l·ªói sau khi ho√†n t·∫•t chu k·ª≥ n·∫°p

C·∫•u tr√∫c th∆∞ m·ª•c:
    quantum_core_server/
    ‚îú‚îÄ‚îÄ core/
    ‚îÇ   ‚îú‚îÄ‚îÄ quantum_core_loader.py   ‚Üê File n√†y
    ‚îÇ   ‚îú‚îÄ‚îÄ ...
    ‚îú‚îÄ‚îÄ quantum_layer_map.json       ‚Üê File ƒë·ªãnh nghƒ©a h·ªá t·∫ßng
"""

import os
import json
import importlib
import time
import traceback
from datetime import datetime

# ==============================
# C·∫§U H√åNH CHUNG
# ==============================
LAYER_MAP_PATH = os.path.join(os.path.dirname(__file__), "..", "quantum_layer_map.json")
CORE_PATH = os.path.dirname(__file__)
LOG_PATH = os.path.join(CORE_PATH, "logs")
os.makedirs(LOG_PATH, exist_ok=True)
LOG_FILE = os.path.join(LOG_PATH, "quantum_loader.log")


# ==============================
# H√ÄM H·ªñ TR·ª¢
# ==============================
def log(msg: str):
    """Ghi log ra console v√† file."""
    ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
    text = f"{ts} {msg}"
    print(text)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")


def progress_bar(current, total, bar_length=40):
    """Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh."""
    percent = current / total
    filled = int(bar_length * percent)
    bar = "‚ñà" * filled + "-" * (bar_length - filled)
    print(f"\r[{bar}] {percent * 100:6.2f}% ({current}/{total})", end="", flush=True)


def load_json(path):
    """ƒê·ªçc file JSON."""
    if not os.path.exists(path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {path}")
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def import_layer(module_name, layer_name):
    """Th·ª≠ import module, ch·∫°y init n·∫øu c√≥."""
    start = time.time()
    try:
        mod = importlib.import_module(f"core.{module_name}")
        if hasattr(mod, "init_layer"):
            mod.init_layer()
            log(f"‚úÖ {layer_name} ‚Äì ƒê√£ kh·ªüi t·∫°o th√†nh c√¥ng (init_layer).")
        else:
            log(f"‚öôÔ∏è  {layer_name} ‚Äì N·∫°p module th√†nh c√¥ng (kh√¥ng c√≥ init_layer).")
        elapsed = time.time() - start
        return True, elapsed
    except Exception as e:
        elapsed = time.time() - start
        log(f"‚ùå L·ªói khi n·∫°p {layer_name}: {e}")
        tb = "".join(traceback.format_tb(e.__traceback__))
        log(tb)
        return False, elapsed


# ==============================
# CH∆Ø∆†NG TR√åNH CH√çNH
# ==============================
def run_loader():
    """Kh·ªüi ƒë·ªông to√†n b·ªô h·ªá t·∫ßng l∆∞·ª£ng t·ª≠."""
    start_time = time.time()
    log("=" * 90)
    log("üöÄ B·∫ÆT ƒê·∫¶U KH·ªûI T·∫†O QUANTUM CORE SERVER PIPELINE (v2.0)")
    log("=" * 90)

    data = load_json(LAYER_MAP_PATH)
    domains = data.get("domains", [])
    total_layers = sum(len(d["layers"]) for d in domains)
    success, failed = 0, 0
    failed_layers = []

    index = 0
    for domain in domains:
        log(f"\nüåê [DOMAIN] {domain['name']}: {domain['description']}")
        for layer in domain["layers"]:
            index += 1
            progress_bar(index, total_layers)
            layer_name = f"T·∫ßng {layer['id']:02d} ‚Äì {layer['name']}"
            module_name = layer["file"].replace(".py", "")

            log(f"\nüîπ ƒêang n·∫°p {layer_name} ...")
            ok, elapsed = import_layer(module_name, layer_name)
            if ok:
                success += 1
                log(f"‚è±Ô∏è  Th·ªùi gian: {elapsed:.2f}s")
            else:
                failed += 1
                failed_layers.append(layer_name)
            time.sleep(0.05)

    print()  # xu·ªëng d√≤ng sau progress bar
    log("\n" + "=" * 90)
    log(f"üèÅ HO√ÄN T·∫§T KH·ªûI T·∫†O PIPELINE ‚Äì T·ªïng t·∫ßng: {total_layers}")
    log(f"   ‚úÖ Th√†nh c√¥ng: {success}")
    log(f"   ‚ùå L·ªói: {failed}")
    log(f"   ‚è±Ô∏è  T·ªïng th·ªùi gian: {time.time() - start_time:.2f}s")
    log("=" * 90)

    # Th·ª≠ kh√¥i ph·ª•c c√°c t·∫ßng l·ªói
    if failed_layers:
        log("\nü©π B·∫ÆT ƒê·∫¶U TH·ª¨ KH√îI PH·ª§C C√ÅC T·∫¶NG L·ªñI ...")
        recovered = 0
        for name in failed_layers:
            try:
                module_name = name.split("‚Äì")[-1].strip().lower().replace(" ", "_")
                mod = importlib.import_module(f"core.{module_name}")
                if hasattr(mod, "init_layer"):
                    mod.init_layer()
                    recovered += 1
                    log(f"üí´ Ph·ª•c h·ªìi th√†nh c√¥ng: {name}")
            except Exception as e:
                log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph·ª•c h·ªìi {name}: {e}")
        log(f"üîÅ Ho√†n t·∫•t kh√¥i ph·ª•c ‚Äì {recovered}/{len(failed_layers)} t·∫ßng h·ªìi ph·ª•c ƒë∆∞·ª£c.")

    log("\n" + "=" * 90)
    if failed == 0:
        log("üåà H·ªÜ TH·ªêNG QUANTUM CORE ƒê√É S·∫¥N S√ÄNG HO·∫†T ƒê·ªòNG ·ªîN ƒê·ªäNH.")
    else:
        log("‚ö†Ô∏è M·ªôt s·ªë t·∫ßng ch∆∞a kh·ªüi t·∫°o ƒë∆∞·ª£c ‚Äì xem log ƒë·ªÉ x·ª≠ l√Ω chi ti·∫øt.")
    log("=" * 90)


# ==============================
# MAIN ENTRY
# ==============================
if __name__ == "__main__":
    run_loader()
