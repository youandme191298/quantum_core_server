# =====================================================
# ‚öõÔ∏è Quantum Core Server Pro v1.3 ‚Äî Fast Reload Edition
# =====================================================
# - Ch·∫°y 1 l·∫ßn duy nh·∫•t (kh√¥ng t√°i deploy)
# - T·ª± ƒë·ªông ph√°t hi·ªán v√† n·∫°p t·∫ßn m·ªõi trong th∆∞ m·ª•c core/
# - Auto-Heal, Auto-Reload v√† Fast Layer Injection
# =====================================================

from flask import Flask, jsonify
import importlib, os, threading, time, random, sys

# =====================================================
# ‚öôÔ∏è 1. C·∫•u h√¨nh Flask API
# =====================================================
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({
        "status": "Quantum Core Server Pro v1.3 ‚Äì Fast Reload Active",
        "auto_reload": True,
        "message": "üåå Quantum field harmonized & running 24/24."
    })

# =====================================================
# üîÅ 2. Fast Reload Engine (ch·∫°y li√™n t·ª•c)
# =====================================================
def fast_reload_core():
    loaded_modules = set()
    core_path = os.path.join(os.getcwd(), "core")

    print("\n[FAST_RELOAD] üöÄ Quantum Core Fast Reload Engine started.")
    print("[FAST_RELOAD] üîç Watching for new energy layers in /core ...\n")

    while True:
        for file in os.listdir(core_path):
            if file.endswith(".py") and not file.startswith("__"):
                module_name = f"core.{file[:-3]}"
                if module_name not in loaded_modules:
                    try:
                        module = importlib.import_module(module_name)
                        threading.Thread(target=module.run_layer, daemon=True).start()
                        print(f"[CORE_RELOAD] üîÅ Loaded layer: {module_name}")
                        loaded_modules.add(module_name)
                    except Exception as e:
                        print(f"[CORE_RELOAD] ‚ö† Error loading {module_name}: {e}")
        time.sleep(8)  # ki·ªÉm tra m·ªói 8 gi√¢y

# =====================================================
# üßò 3. Chu k·ª≥ nƒÉng l∆∞·ª£ng l√µi
# =====================================================
def core_energy_loop():
    while True:
        sync = round(random.uniform(4.76, 4.89), 4)
        stability = round(random.uniform(0.97, 1.00), 3)
        print(f"[SYNC_CORE] ‚öõÔ∏è Base Sync: {sync} | Stability: {stability}")
        time.sleep(15)

# =====================================================
# ü©π 4. Auto-Heal nh·∫π (kh√¥ng kh·ªüi ƒë·ªông l·∫°i server)
# =====================================================
def auto_heal():
    while True:
        if random.random() < 0.08:
            print("[AUTO_HEAL] üí´ Dao ƒë·ªông ph√°t hi·ªán ‚Äî c√¢n b·∫±ng l·∫°i nƒÉng l∆∞·ª£ng...")
        time.sleep(25)

# =====================================================
# üöÄ 5. Kh·ªüi ƒë·ªông t·∫•t c·∫£ h·ªá th·ªëng
# =====================================================
if __name__ == "__main__":
    print("/////////////////////////////////////////////////////////")
    print("==> üöÄ Quantum Core Server Pro v1.3 ƒëang kh·ªüi ƒë·ªông...")
    print("==> üîÅ Fast Reload Engine: B·∫¨T")
    print("==> ‚öõÔ∏è T·ª± ƒë·ªông n·∫°p t·∫ßng m·ªõi m·ªói 8 gi√¢y, kh√¥ng c·∫ßn deploy.")
    print("/////////////////////////////////////////////////////////\n")

    # Lu·ªìng l√µi
    threading.Thread(target=fast_reload_core, daemon=True).start()
    threading.Thread(target=core_energy_loop, daemon=True).start()
    threading.Thread(target=auto_heal, daemon=True).start()

    app.run(host="0.0.0.0", port=8080, debug=False)
