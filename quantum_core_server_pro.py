import os
import importlib
import threading
import time
import traceback
from datetime import datetime

# =========================
#  QUANTUM CORE SERVER PRO
# =========================
# T·ª± ƒë·ªông nh·∫≠n di·ªán ‚Äì t·∫£i t·∫ßng nƒÉng l∆∞·ª£ng ‚Äì ch·∫°y song song ‚Äì gi√°m s√°t t√¨nh tr·∫°ng 24/24
# Phi√™n b·∫£n: v3.1 | C·∫≠p nh·∫≠t: 20-10-2025
# =========================

CORE_PATH = "core"
SCAN_INTERVAL = 180        # Th·ªùi gian qu√©t l·∫°i th∆∞ m·ª•c core (gi√¢y)
THREAD_DELAY = 0.8         # Kho·∫£ng c√°ch gi·ªØa m·ªói t·∫ßng khi kh·ªüi ƒë·ªông
MONITOR_INTERVAL = 300     # Gi√°m s√°t tr·∫°ng th√°i m·ªói 5 ph√∫t

active_threads = {}        # Theo d√µi tr·∫°ng th√°i t·∫ßng
lock = threading.Lock()


# === T·ª∞ ƒê·ªòNG QU√âT DANH S√ÅCH FILE TRONG /core/ ===
def scan_modules():
    modules = []
    for file in os.listdir(CORE_PATH):
        if file.endswith(".py") and not file.startswith("__"):
            modules.append(file[:-3])  # b·ªè ph·∫ßn .py
    return sorted(modules)


# === CH·∫†Y M·ªòT T·∫¶NG ===
def run_module(name):
    global active_threads
    try:
        mod = importlib.import_module(f"{CORE_PATH}.{name}")
        if hasattr(mod, "run_layer"):
            print(f"üåÄ [K√≠ch ho·∫°t] {name}")
            mod.run_layer()
        else:
            print(f"‚ö†Ô∏è [B·ªè qua] {name} kh√¥ng c√≥ h√†m run_layer()")
    except Exception as e:
        print(f"‚ùå [L·ªói] {name}: {e}")
        traceback.print_exc()
    finally:
        with lock:
            active_threads[name] = False


# === KH·ªûI ƒê·ªòNG T·∫§T C·∫¢ T·∫¶NG ===
def start_all_layers():
    print("\nüöÄ B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông to√†n b·ªô t·∫ßng nƒÉng l∆∞·ª£ng...")
    modules = scan_modules()
    with lock:
        for name in modules:
            if name not in active_threads or not active_threads[name]:
                t = threading.Thread(target=run_module, args=(name,), daemon=True)
                t.start()
                active_threads[name] = True
                time.sleep(THREAD_DELAY)
    print("üåç T·∫•t c·∫£ t·∫ßng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.")


# === T·ª∞ ƒê·ªòNG GI√ÅM S√ÅT ‚Äì KH·ªûI ƒê·ªòNG L·∫†I N·∫æU T·∫¶NG D·ª™NG ===
def monitor_layers():
    while True:
        time.sleep(MONITOR_INTERVAL)
        with lock:
            total = len(active_threads)
            active = sum(active_threads.values())
        print(f"[MONITOR] {datetime.now().strftime('%H:%M:%S')} ‚Üí Ho·∫°t ƒë·ªông: {active}/{total} t·∫ßng.")
        if active < total:
            print("‚öôÔ∏è M·ªôt s·ªë t·∫ßng ƒë√£ ng·ª´ng. Ti·∫øn h√†nh kh·ªüi ƒë·ªông l·∫°i...")
            start_all_layers()


# === QU√âT T·ª∞ ƒê·ªòNG N·∫æU TH√äM T·∫¶NG M·ªöI V√Ä KH·ªûI ƒê·ªòNG NGAY ===
def auto_reload_core():
    known = set(scan_modules())
    while True:
        time.sleep(SCAN_INTERVAL)
        current = set(scan_modules())
        new_modules = current - known
        if new_modules:
            print(f"\nüîÅ Ph√°t hi·ªán t·∫ßng m·ªõi: {', '.join(new_modules)} ‚Äì T·ª± ƒë·ªông t·∫£i th√™m.")
            with lock:
                for name in new_modules:
                    if name not in active_threads:
                        t = threading.Thread(target=run_module, args=(name,), daemon=True)
                        t.start()
                        active_threads[name] = True
                        time.sleep(THREAD_DELAY)
            known = current


# === H√ÄM MAIN KH·ªûI ƒê·ªòNG TO√ÄN H·ªÜ TH·ªêNG ===
def main():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ‚öôÔ∏è Quantum Core Server Pro v3.1                  ‚ïë
‚ïë   Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông 24/24 ‚Äì Auto Discovery     ‚ïë
‚ïë   NƒÉng l∆∞·ª£ng: Thi√™n ‚Äì ƒê·ªãa ‚Äì Nh√¢n ‚Äì ƒê·∫°o ‚Äì V√¥ C·ª±c   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

    start_all_layers()

    threading.Thread(target=auto_reload_core, daemon=True).start()
    threading.Thread(target=monitor_layers, daemon=True).start()

    while True:
        time.sleep(60)


# === CH·∫†Y H·ªÜ TH·ªêNG ===
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüßò H·ªá th·ªëng d·ª´ng th·ªß c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói h·ªá th·ªëng: {e}")
        traceback.print_exc()
